import asyncio
from sqlalchemy import text
from app.src.config.config import settings
from sqlalchemy.ext.asyncio import create_async_engine

async def check_tables():
    print("üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ:", settings.async_database_url)
    engine = create_async_engine(settings.async_database_url)
    try:
        async with engine.connect() as conn:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó PostgreSQL
            version = await conn.scalar(text("SELECT version()"))
            print("‚ÑπÔ∏è –í–µ—Ä—Å—ñ—è PostgreSQL:", version.split('\n')[0])
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å
            tables = await conn.scalars(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
            """))
            print("üìä –¢–∞–±–ª–∏—Ü—ñ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:", tables.all())
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞:", e)

asyncio.run(check_tables())

async def check_data():
    engine = create_async_engine(settings.async_database_url)
    async with engine.connect() as conn:
        users_count = await conn.scalar(text("SELECT COUNT(*) FROM users"))
        print(f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ: {users_count}")

asyncio.run(check_data())